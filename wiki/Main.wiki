#labels RomCollectionBrowser,documentation
=Rom Collection Browser=

Information on this site is incomplete

== Introduction ==
As the name says this script will handle rom collections that you can buy, download or collect by yourself. That means that you will have all information (screenshots, covers, description files, ...) on your computer. You can point this script to your rom folders and additional data and tell it to import all information to its database. Afterwards you should be able to browse all imported roms by filter criteria (console, genre, ...), show some extra info like screenshots, publisher, plot, ... and invoke an external emulator with additional parameters like selected rom file name.

Actually this script relies on file naming. If you have a Game "Mygame" its rom file should be named "Mygame.adf" if it is an amiga game. All screenshots must be named "Mygame.jpg", "Mygame.png", ... OR they will have to reside in a folder that is called "Mygame". Then this script will import all image files in this folder and associate it with the game "Mygame". Configuration of screenshot paths can look like this:

"/home/user/emu/amiga/screens/%GAME%/`*`.png"

"/home/user/emu/amiga/%GAME%/screens/`*`.png"

"/home/user/emu/amiga/screens/%GAME%.png"

%GAME% will be replaced with the current game name during import. All files that match this file mask will be imported.

== Setup test scenario ==
To show you how this script will work and how data should (could) be organized I also provide a zip file with testdata. This includes cover screenshots, game screenshots, game description files and sample configuration files. It only includes placeholder files for the roms (empty text files that show you a sample naming convention). You can download the roms here: http://www.amigaland.de/index.php?option=com_remository&Itemid=27&func=select&id=2. As they say all roms on this page are free to download legally. You will have to rename some of them because I need a special disk indicator to support multiple roms for one game (explained in configuration section).

1. Download "Rom Collection Browser V0.2.zip (http://romcollectionbrowser.googlecode.com/files/Rom%20Collection%20Browser%20V0.2.zip)

2. Unzip it to your XBMC scripts folder

3. Download "Testdata.zip" (http://romcollectionbrowser.googlecode.com/files/Testdata.zip)

4. Unzip it somewhere

5. Go to the Testdata folder

6. Edit "config_Windows.xml" or "config_Linux.xml": Replace every occurance of "PathToTestData" with the absolute path to your Testdata folder (e.g "/home/user/Testdata")

7. (Optionally) edit the value of property "emulatorCmd". This command will be invoked when you launch a rom file. %ROM% will be replaced with the name of the rom file to be launched. If you have multiple rom files for one game %I% will be replaced with the (zero-based) index of the current file.

8. Rename "config_Windows.xml" or "config_Linux.xml" to "config.xml"

9. Copy "config.xml" to "XBMC/scripts/Rom Collection Browser/resources/database" (overwrite the existing file)

10. Linux only: make the file "XBMC/scripts/Rom Collection Browser/applaunch.sh" executable

11. Start xbmc

12. Go to "Rom Collection Browser": You should see the initial view with some empty lists and three buttons.

13. Click "Import Settings": After some seconds you should see the entries "Amiga" and "Super Nintendo" in the filter list "Consoles".

14. Click "Update DB": After some seconds all other filter lists should be filled with data. Now you can move around and get a filtered view of all imported rom files (only 7 amiga games in this test scenario).


== Usage ==
"Rom Collection Browser" will scan your rom folders and data folders and will import as much game relevant data as it can get. To get this job done you have to tell it where to search and what to search for. At the moment this is done via xml configuration file. In a later release this could be done via settings page.

=== Import Settings ===
To prepare implementation of a settings page I decided to store configuration information in the database. So you will have to import settings from your xml config file before you can start scanning rom folders. Import settings means that information from your configuration file "XBMC/scripts/Rom Collection Browser/resources/database/config.xml" will be written to database "MyGames.db" (same folder). The format of this configuration file is explained in a later section.

At the momoment there is no way to update configuration information! If you change your configuration you will have to delete database "MyGames.db" (just delete the file) and reimport settings (and start "Update DB" again). You could also use a database tool like sqlitestudio to edit the values directly in database.


=== Update DB ===
This will use the settings information you imported in the previous step to scan the configured folders for roms and data. Every imported file will be associated with a game and a filetype (rom, ingame screenshot, title screenshot, cover, ...). Only the path to the file is imported, not the file itself. If you delete or move the file after importing it won't work anymore.

RCB will also try to parse description files for your games. There is a configurable parser that will read an xml parser configuration file that tells it how to parse the current file format. At the moment this only works with simple multiline text files. The format of this parser configuration is explained in a later section.

If you add new data to one of your rom collection you can use "Updata DB" as often as you like. Every run will only import new data and will ignore all data that is already stored in database. But that also means that you won't be able to update data of your roms. To achieve this you have to delete your database and reimport.


== Configuration ==
Configuration is done via xml files. There is one main configuration file "config.xml" that you can find in the database directory. There can also be some parser configuration files that will allow you to control the behaviour of the description file parser.

=== config.xml ===
This is the main configuration file. You can find it here: XBMC/scripts/Rom Collection Browser/resources/database/config.xml. 

An example file could look like this:

{{{
<config>
	<Consoles>		
		<Console>
			<name>Amiga</name>
			<desc>Description of Amiga</desc>
			<imgFile>/home/user/emu/Amiga.png</imgFile>
		</Console>
		<Console>
			<name>Super Nintendo</name>
			<desc>Description of Super Nintendo</desc>
			<imgFile>/home/user/emu/NES.png</imgFile>
		</Console>
	</Consoles>
	<RomCollections>
		<RomCollection>			
			<name>Collection V1</name>
			<consoleName>Amiga</consoleName>
			<emulatorCmd>uae {-%I% "%ROM%"}</emulatorCmd>
			<diskPrefix>_Disk</diskPrefix>
			<useEmuSolo>True</useEmuSolo>
			<escapeCommand>True</escapeCommand>
			<relyOnNaming>True</relyOnNaming>			
			<DescFilePerGame>True</DescFilePerGame>
			<startWithDescFile>False</startWithDescFile>
			<descriptionParserFile>/home/user/emu/Amiga/Collection V1/parserConfig.xml</descriptionParserFile>			
			<romPath>/home/user/emu/Amiga/Collection V1/games/*.adf</romPath>
			<descFilePath>/home/user/emu/Amiga/Collection V1/%GAME%/info.txt</descFilePath>
			<coverPath>/home/user/emu/Amiga/Collection V1/%GAME%/covers/*.jpg</coverPath>
			<coverPath>/home/user/emu/Amiga/Collection V1/%GAME%/covers/*.gif</coverPath>
			<coverPath>/home/user/emu/Amiga/Collection V1/%GAME%/covers/*.png</coverPath>
			<ingamescreenshotPath>/home/user/emu/Amiga/Collection V1/%GAME%/screens/*.jpg</ingamescreenshotPath>
			<ingamescreenshotPath>/home/user/emu/Amiga/Collection V1/%GAME%/screens/*.gif</ingamescreenshotPath>
			<ingamescreenshotPath>/home/user/emu/Amiga/Collection V1/%GAME%/screens/*.png</ingamescreenshotPath>
			<titleScreenshotPath></titleScreenshotPath>
			<cartridgePath></cartridgePath>
			<configFilePath></configFilePath>
			<ingamevidPath></ingamevidPath>
			<trailerPath></trailerPath>
			<manualPath></manualPath>
		</RomCollection>
	</RomCollections>
	<!-- Don't edit filetypes -->
	<FileTypes>
		<FileType>
			<name>rom</name>
		</FileType>
		<FileType>
			<name>screenshottitle</name>
		</FileType>
		<FileType>
			<name>screenshotingame</name>
		</FileType>
		...
	</FileTypes>	
</config>
}}}

==== Console ====
You must add every console you want to emulate here. Configuration properties should be self explanating.


==== `RomCollection` ====
There is a 1:n relation from rom collection to console: you can configure 1 emulator for each rom collection but there could be different rom collections that use the same emulator. Usually there will be one `RomCollection` entry for each emulator/console.

===== name =====
This is only used to distinguish rom collections.

===== consoleName =====
This will associate all games of the current rom collection to this console. It is important that you use the exactly same name as in console configuration above.

===== emulatorCmd =====
This command will be invoked when you select a game. You can use the following placeholders in your commands:

%ROM% will be replaced with the current file name

%I% will be replaced with the zero-based index of the current rom file

If the emulator supports multiple rom files (like uae) you can use {} for repeating parameters. In a command like "uae {-%I% "%ROM%"}" the part in the {} brackets will be repeated for any disk file of the game. For example if you have an amiga game (`MyGame`) that consists of 2 disk files the uae command at runtime could be: uae -0 "`MyGame_Disk1.adf`" -1 "`MyGame_Disk2.adf`".

===== diskPrefix =====
This is used to detect multi rom games. I don't want to show every rom file in th UI if they all belong to the same game. Second reason to use this property are emulators that support to load more than one file at once (like uae). I can't rely on file numbering because you will also have different releases for one game (Lemmings, Lemmings 2, Lemmings 3).

If you use "`_Disk`" as diskPrefix and you have some rom files named "`Mygame.adf`", "`Mygame 2_Disk1.adf`" and "`Mygame 2_Disk2.adf`" this will be detected as two games "`Mygame`" and "`Mygame 2`" where "`Mygame 2`" consists of two rom files. In the UI you will see the "friendly" gamename "`Mygame 2`". If you have your emulatorCmd configured to support multiple rom files you can load both files at once (see explanation of parameter "emulatorCmd").


===== useEmuSolo =====
If set to "True" RCB will try to kill XBMC before starting the emulator. After exiting the emulator you will return to XBMC. If "False" the emulator will be launched while XBMC is running in the background.

In a later release this should also launch RCB again and show your last selection before you launched the game.

In current release there are some problems with this mechanism in windows. I am not able to launch the batch file that should kill XBMC. But I am on it.

===== escapeCommand =====
This will escape the rom file names passed to the emulatorCmd. I did not have problems with using "True" in Linux and Windows. But maybe you can try to change this if you are running into problems with launching games.

===== relyOnNaming =====
This must be "True" actually. I thought about implementing other ways of importing rom files where you don't have to take care of your file naming. But as long as that is not done it must be "True".

===== `DescFilePerGame` =====
There can be one big description file with descriptions for all games in it. Or you can just have one description file per game. In second case the gamename must be somewhere in the path of the descFilePath.

===== startWithDescFile =====
This must be "False" actually. There are some rom collections (Amiga classix for example) that don't use proper file naming (rom files are named different than screenshots) but have one big description file where you will be linked to the rom files and the screenshot files. I am thinking about adding support for this scenario but this has a low priority at the moment.

===== descriptionParserFile =====
Most rom collections that use game description files will have a different file format. I built a configurable parser that reads parse instructions from an xml file and then tries to parse the game descriptions with these instructions. There can only be one description parser file per `RomCollection` entry. The format of the parser file is explained in a later section.

===== romPath =====
The path to your rom files. This path should include wildcards and file extension (*.adf).

Actually there is only one rom path per RomCollection supported. This should be changed in a later release because you may have different paths and file extensions (.zip and .smc for example) in one collection.

===== descFilePath =====
The path to the game description files. These files will be used to obtain additional information like genre, plot, publisher etc. about a game. Depending on the "DescFilePerGame"-Parameter this should be the absolute path to one description file or a path using the %GAME%-placeholder. There can only be one descFilePath per RomCollection.

Examples:

"/home/user/emu/Amiga/Collection V1/%GAME%/info.txt"

"/home/user/emu/Amiga/Collection V1/Info/all.txt"


===== coverPath =====
The path to the cover files. There can be multiple paths per RomCollection. Also used to define file extensions for your files.

Examples:

"/home/user/emu/amiga/covers/%GAME%/*.png"

"/home/user/emu/amiga/%GAME%/covers/*.png"

"/home/user/emu/amiga/covers/%GAME%.png"

"/home/user/emu/amiga/covers/%GAME%.jpg"

"/home/user/emu/amiga/covers/%GAME%.gif"


===== ingamescreenshotPath =====
The path to the ingame screenshot files. There can be multiple paths per RomCollection. Also used to define file extensions for your files.

Examples:

"/home/user/emu/amiga/ingame screens/%GAME%/*.png"

"/home/user/emu/amiga/%GAME%/ingame screens/*.png"

"/home/user/emu/amiga/ingame screens/%GAME%.png"

"/home/user/emu/amiga/ingame screens/%GAME%.jpg"

"/home/user/emu/amiga/ingame screens/%GAME%.gif"


===== titleScreenshotPath =====
The path to the title screenshot files. There can be multiple paths per RomCollection. Also used to define file extensions for your files.

Examples:

"/home/user/emu/amiga/title screens/%GAME%/*.png"

"/home/user/emu/amiga/%GAME%/title screens/*.png"

"/home/user/emu/amiga/title screens/%GAME%.png"

"/home/user/emu/amiga/title screens/%GAME%.jpg"

"/home/user/emu/amiga/title screens/%GAME%.gif"


NOTE: These files will be imported but not shown in the UI actually.

===== cartridgePath =====
The path to the cartridge files. There can be multiple paths per RomCollection. Also used to define file extensions for your files.

Examples:

"/home/user/emu/amiga/cartridges/%GAME%/*.png"

"/home/user/emu/amiga/%GAME%/cartridges/*.png"

"/home/user/emu/amiga/cartridges/%GAME%.png"

"/home/user/emu/amiga/cartridges/%GAME%.jpg"

"/home/user/emu/amiga/cartridges/%GAME%.gif"


NOTE: These files will be imported but not shown in the UI actually.


===== configFilePath =====
not implemented in current release.

===== ingamevidPath =====
not implemented in current release.

===== trailerPath =====
not implemented in current release.

===== manualPath =====
not implemented in current release.