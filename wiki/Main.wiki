#labels RomCollectionBrowser,documentation
<wiki:toc max_depth="4" />


= Introduction =
With this XBMC script you can import and browse rom collections. You can point it to your rom folders and additional data (screenshots, description files, ...) that is already stored on your computer and tell it to import all information to its database. Afterwards you can browse all imported games by filter criteria (console, genre, ...), show some extra information and invoke an external emulator to play the selected rom file.

Actually this script relies on file naming. If you have a Game "Mygame" its rom file should be named "Mygame.adf" (if it is an amiga game). All screenshots must be named "Mygame.ext" (jpg, png, ...) OR they will have to reside in a folder that is called "Mygame". Then this script will import all image files in this folder and associate it with the game "Mygame". Configuration of screenshot paths can look like this:

"/home/user/emu/amiga/screens/%GAME%/`*`.png"

"/home/user/emu/amiga/%GAME%/screens/`*`.png"

"/home/user/emu/amiga/screens/%GAME%.png"

%GAME% will be replaced with the current game name during import. All files that match this file mask will be imported.


= Installation =
If you would like to play with the test scenario just skip these steps and go to the next chapter.

1. Download "Rom Collection Browser V0.3.zip (http://romcollectionbrowser.googlecode.com/files/Rom%20Collection%20Browser%20V0.3.zip)

2. Unzip it to your XBMC scripts folder

3. Create a "config.xml" file here: "XBMC/scripts/Rom Collection Browser/resources/database" (Check configuration section for a sample configuration and to learn how to configure RCB)

4. Start XBMC and launch RCB

5. Click "Import Settings": The Console list should be filled with all your configured consoles

6. Click "Update DB": Depending on your rom collections size this step can take some time. When it is done all other lists should be filled with the imported data.


= Setup test scenario =
To show you how this script will work and how data should (could) be organized I also provide a zip file with testdata. This includes cover screenshots, game screenshots, game description files and sample configuration files. It only includes placeholder files for the roms (empty text files that show you a sample naming convention). There are examples for three different rom collections (two amiga and one snes). You can download the amiga roms here: http://www.amigaland.de/index.php?option=com_remository&Itemid=27&func=select&id=2. As they say all roms on this page are free to download legally. You will have to rename some of them because I need a special disk indicator to support multiple roms for one game (explained in configuration section). Unfortunately there are not many public domain roms for SNES and I could not find any additional data for one of them. I decided to include screenshots and description files of some commercial roms but can't provide a download link for the related rom files. But this test scenario is not really meant to play the games, it should just show you how to configure this script.


1. Download "Rom Collection Browser V0.3.zip (http://romcollectionbrowser.googlecode.com/files/Rom%20Collection%20Browser%20V0.3.zip)

2. Unzip it to your XBMC scripts folder

3. Download "Testdata V0.3.zip" (http://romcollectionbrowser.googlecode.com/files/Testdata%20V0.3.zip)

4. Unzip it somewhere

5. Go to the new Testdata folder

6. Edit "config_Windows.xml" or "config_Linux.xml": Replace every occurance of "PathToTestData" with the absolute path to your Testdata folder (e.g. "/home/user/Testdata V0.3" or "D:\Downloads\RCB\Testdata V0.3")

7. (Optionally) edit the value of property "emulatorCmd". This command will be invoked when you launch a rom file. %ROM% will be replaced with the name of the rom file to be launched. If you have multiple rom files for one game %I% will be replaced with the (zero-based) index of the current file.

8. Rename "config_Windows.xml" or "config_Linux.xml" to "config.xml"

9. Copy "config.xml" to "XBMC/scripts/Rom Collection Browser/resources/database"

10. Linux only: make the file "XBMC/scripts/Rom Collection Browser/applaunch.sh" executable

10a. Windows only: check the path to your XBMC installation at the end of the file "XBMC/scripts/Rom Collection Browser/applaunch.bat"

11. Start xbmc

12. Go to "Rom Collection Browser": You should see the initial view with some empty lists and three buttons.

13. Click "Import Settings": After some seconds you should see the entries "Amiga" and "Super Nintendo" in the filter list "Consoles".

14. Click "Update DB": After some seconds all other filter lists should be filled with data. Now you can move around and get a filtered view of all imported rom files (only 7 amiga games in this test scenario).

15. If you would like to launch and play the rom files go to your Testdata folder an replace the placeholder rom files with real ones (e.g. Testdata V0.3/Collection V1/roms/).


= Usage =
"Rom Collection Browser" will scan your rom folders and data folders and will import as much game relevant data as it can get. To get this job done you have to tell it where to search and what to search for. At the moment this is done via xml configuration file. In a later release this could be done via settings page.

== Import Settings ==
To prepare implementation of a settings page I decided to store configuration information in the database. So you will have to import settings from your xml config file before you can start scanning rom folders. Import settings means that information from your configuration file "XBMC/scripts/Rom Collection Browser/resources/database/config.xml" will be written to database "MyGames.db" (same folder). The format of this configuration file is explained in a later section.

If you want to make changes to the configuration just edit the xml file an click "Import Settings" again.


== Update DB ==
This will use the settings information you imported in the previous step to scan the configured folders for roms and data. Every imported file will be associated with a game and a filetype (rom, ingame screenshot, title screenshot, cover, ...). Only the path to the file is imported, not the file itself. If you delete or move the file after importing it won't work anymore.

RCB will also try to parse description files for your games during import. At the moment this only works with simple multiline text files. There is a configurable parser that will read parse instructions from an xml configuration file that tells it how to parse the current file format.  The format of this parser configuration is explained in a later section.

If you don't have any description files or the parser can't read the file format the game will be imported without description. That means that you won't have any extra information about this game.

If you encounter any errors or miss some games after import check the logfile "update.log" in the scripts home directory. Search for any occurance of "ERROR" or "WARNING" to see what went wrong.

If you add new data to one of your rom collections you can use "Updata DB" as often as you like. Every run will import new data and updates the data that is already stored in database. You can configure RCB not to import any new game relevant data from description files. In that mode it will only look for new game related files (screenshots for example). You can also mark a rom collection to be ignored completely when scanning for new data. See configuration section for more information about these options.

Depending on your rom collections size this step can take some time. You can see the current import status in the lower right corner.


= Configuration =
Configuration is done via xml files. There is one main configuration file "config.xml" that must be placed in the database directory. There may also be some parser configuration files (one for every different file format) that will allow you to control the behaviour of the description file parser. You have to point RCB to these files via "config.xml".

== config.xml ==
This is the main configuration file. You can find it here: "XBMC/scripts/Rom Collection Browser/resources/database/config.xml" (create it, if it is not there).

An example file could look like this (Example from test scenario with three rom collections: 2 Amiga (with different folder structures) and 1 SNES):

{{{
<config>
	<RCBSettings>
		<favoriteConsole></favoriteConsole>
		<favoriteGenre></favoriteGenre>
		<showEntryAllConsoles>True</showEntryAllConsoles>
		<showEntryAllGenres>True</showEntryAllGenres>
		<showEntryAllYears>True</showEntryAllYears>
		<showEntryAllPublisher>True</showEntryAllPublisher>
		<saveViewStateOnExit>True</saveViewStateOnExit>
		<saveViewStateOnLaunchEmu>True</saveViewStateOnLaunchEmu>
	</RCBSettings>
	<Consoles>		
		<Console>
			<name>Amiga</name>
			<desc>The Amiga 500, also known as the A500 (or its code name Rock Lobster), was the first low-end Commodore Amiga 16/32-bit multimedia home/personal computer. It was announced at the winter Consumer Electronics Show in January 1987, at the same time as the high-end Amiga 2000, and competed directly against the Atari 520ST.</desc>
			<imgFile>PathToTestData/consoleImages/Amiga.png</imgFile>
		</Console>
		<Console>
			<name>Super Nintendo</name>
			<desc>The Super Nintendo (SNES) is a 16-bit video game console released in 1990. 32768 (15-bit) colors, 8 channels 16-bit 32 kHz audio channels. 128 kB main RAM, 64 kB Video RAM and 64 kB Audio RAM.</desc>
			<imgFile>PathToTestData/consoleImages/SNES.png</imgFile>
		</Console>
	</Consoles>
	<RomCollections>
		<RomCollection>			
			<name>Collection V1</name>
			<consoleName>Amiga</consoleName>
			<emulatorCmd>uae {-%I% "%ROM%"}</emulatorCmd>
			<useEmuSolo>True</useEmuSolo>
			<escapeCommand>True</escapeCommand>
			<relyOnNaming>True</relyOnNaming>
			<startWithDescFile>False</startWithDescFile>
			<descFilePerGame>False</descFilePerGame>
			<descriptionParserFile>PathToTestData/Collection V1/parserConfig.xml</descriptionParserFile>
			<diskPrefix>_Disk</diskPrefix>
			<typeOfManual>Text</typeOfManual>
			<allowUpdate>True</allowUpdate>
			<ignoreOnScan>False</ignoreOnScan>
			<romPath>PathToTestData/Collection V1/roms/*.adf</romPath>
			<romPath>PathToTestData/Collection V1/roms/*.ADF</romPath>
			<descFilePath>PathToTestData/Collection V1/synopsis/synopsis.txt</descFilePath>
			<coverPath>PathToTestData/Collection V1/cover/%GAME%.jpg</coverPath>
			<coverPath>PathToTestData/Collection V1/cover/%GAME%.gif</coverPath>
			<coverPath>PathToTestData/Collection V1/cover/%GAME%.png</coverPath>
			<ingamescreenshotPath>PathToTestData/Collection V1/screens/%GAME%.jpg</ingamescreenshotPath>
			<ingamescreenshotPath>PathToTestData/Collection V1/screens/%GAME%.gif</ingamescreenshotPath>
			<ingamescreenshotPath>PathToTestData/Collection V1/screens/%GAME%.png</ingamescreenshotPath>
			<titleScreenshotPath></titleScreenshotPath>
			<cartridgePath></cartridgePath>
			<configFilePath></configFilePath>
			<ingamevidPath></ingamevidPath>
			<trailerPath></trailerPath>
			<manualPath></manualPath>
		</RomCollection>
		<RomCollection>			
			<name>Collection V2</name>
			<consoleName>Amiga</consoleName>
			<emulatorCmd>uae {-%I% "%ROM%"}</emulatorCmd>
			<useEmuSolo>True</useEmuSolo>
			<escapeCommand>True</escapeCommand>
			<relyOnNaming>True</relyOnNaming>
			<startWithDescFile>False</startWithDescFile>
			<descFilePerGame>True</descFilePerGame>
			<descriptionParserFile>PathToTestData/Collection V2/parserConfig.xml</descriptionParserFile>
			<diskPrefix>_Disk</diskPrefix>
			<typeOfManual>Text</typeOfManual>
			<allowUpdate>True</allowUpdate>
			<ignoreOnScan>False</ignoreOnScan>
			<romPath>PathToTestData/Collection V2/roms/*.adf</romPath>
			<romPath>PathToTestData/Collection V2/roms/*.ADF</romPath>
			<descFilePath>PathToTestData/Collection V2/synopsis/%GAME%/synopsis.txt</descFilePath>
			<coverPath>PathToTestData/Collection V2/cover/%GAME%/*.jpg</coverPath>
			<coverPath>PathToTestData/Collection V2/cover/%GAME%/*.gif</coverPath>
			<coverPath>PathToTestData/Collection V2/cover/%GAME%/*.png</coverPath>
			<ingamescreenshotPath>PathToTestData/Collection V2/screens/%GAME%/*.jpg</ingamescreenshotPath>
			<ingamescreenshotPath>PathToTestData/Collection V2/screens/%GAME%/*.gif</ingamescreenshotPath>
			<ingamescreenshotPath>PathToTestData/Collection V2/screens/%GAME%/*.png</ingamescreenshotPath>
			<titleScreenshotPath></titleScreenshotPath>
			<cartridgePath></cartridgePath>
			<configFilePath></configFilePath>
			<ingamevidPath></ingamevidPath>
			<trailerPath></trailerPath>
			<manualPath></manualPath>
		</RomCollection>		
		<RomCollection>			
			<name>Collection V3</name>
			<consoleName>Super Nintendo</consoleName>
			<emulatorCmd>zsnes.exe -m "%ROM%"</emulatorCmd>
			<useEmuSolo>True</useEmuSolo>
			<escapeCommand>True</escapeCommand>
			<relyOnNaming>True</relyOnNaming>
			<startWithDescFile>False</startWithDescFile>
			<descFilePerGame>False</descFilePerGame>
			<descriptionParserFile>PathToTestData/Collection V3/parserConfig.xml</descriptionParserFile>
			<diskPrefix>_Disk</diskPrefix>
			<typeOfManual>Text</typeOfManual>
			<allowUpdate>True</allowUpdate>
			<ignoreOnScan>False</ignoreOnScan>
			<romPath>PathToTestData/Collection V3/roms/*.zip</romPath>
			<romPath>PathToTestData/Collection V3/roms/*.smc</romPath>
			<descFilePath>PathToTestData/Collection V3/description/synopsis.txt</descFilePath>
			<coverPath>PathToTestData/Collection V3/cover/%GAME%.jpg</coverPath>
			<coverPath>PathToTestData/Collection V3/cover/%GAME%.gif</coverPath>
			<coverPath>PathToTestData/Collection V3/cover/%GAME%.png</coverPath>
			<ingamescreenshotPath>PathToTestData/Collection V3/screens/%GAME%.jpg</ingamescreenshotPath>
			<ingamescreenshotPath>PathToTestData/Collection V3/screens/%GAME%.gif</ingamescreenshotPath>
			<ingamescreenshotPath>PathToTestData/Collection V3/screens/%GAME%.png</ingamescreenshotPath>
			<titleScreenshotPath></titleScreenshotPath>
			<cartridgePath></cartridgePath>
			<configFilePath></configFilePath>
			<ingamevidPath></ingamevidPath>
			<trailerPath></trailerPath>
			<manualPath></manualPath>
		</RomCollection>
	</RomCollections>
	<!-- Don't edit filetypes -->
	<FileTypes>
		<FileType>
			<name>rom</name>
		</FileType>
		<FileType>
			<name>screenshottitle</name>
		</FileType>
		<FileType>
			<name>screenshotingame</name>
		</FileType>
		<FileType>
			<name>cover</name>
		</FileType>
		<FileType>
			<name>cartridge</name>
		</FileType>
		<FileType>
			<name>manual</name>
		</FileType>
		<FileType>
			<name>ingamevideo</name>
		</FileType>
		<FileType>
			<name>trailer</name>
		</FileType>
		<FileType>
			<name>description</name>
		</FileType>
		<FileType>
			<name>configuration</name>
		</FileType>
	</FileTypes>	
</config>

}}}

=== RCBSettings ===
These are the global settings of RCB.
	
==== showEntryAllConsoles ====
Actually there are four filter lists to browse your rom files. Every list has an entry "All" per default. If you have a large rom collection and you try to load all your roms unfiltered this can take some time. You can set this property to "False" to remove the entry "All" from the Console filter list.

==== showEntryAllGenres ====
You can set this property to "False" to remove the entry "All" from the Genre filter list.

==== showEntryAllYears ====
You can set this property to "False" to remove the entry "All" from the Year filter list.

==== showEntryAllPublisher ====
You can set this property to "False" to remove the entry "All" from the Publisher filter list.
		
==== saveViewStateOnExit ====
If set to "True" RCB will save the current view state (selected filter criteria and focused control) and restores it when you launch it the next time. This option will be used when exiting RCB.

==== saveViewStateOnLaunchEmu ====
If set to "True" RCB will save the current view state (selected filter criteria and focused control) and restores it when you launch it the next time. This option will be used when launching an emulator in "solo" mode.
		
==== favoriteConsole ====
This option is not implemented yet.

==== favoriteGenre ====
This option is not implemented yet.


=== Console ===
You must add every console you want to emulate here. Configuration properties should be self explanating.


=== Rom Collection ===
There is a 1:n relation from `RomCollection` to console and emulator: you can configure 1 emulator and 1 console for each `RomCollection` but there could be different rom collections that use the same emulator or console. Usually there will be one `RomCollection` entry for each emulator/console.

==== name ====
This is only used to distinguish rom collections.

==== consoleName ====
This will associate all games of the current rom collection to this console. It is important that you use the exactly same name as in console configuration above.

==== emulatorCmd ====
This command will be invoked when you select a game. You can use the following placeholders in your commands:

%ROM% will be replaced with the current file name

%I% will be replaced with the zero-based index of the current rom file

If the emulator supports multiple rom files (like uae) you can use {} for repeating parameters. In a command like "uae {-%I% "%ROM%"}" the part in the {} brackets will be repeated for any disk file of the game. For example if you have an amiga game (`MyGame`) that consists of 2 disk files the uae command at runtime could be: uae -0 "`MyGame_Disk1.adf`" -1 "`MyGame_Disk2.adf`".

==== diskPrefix ====
This is used to detect multi rom games. I don't want to show every rom file in th UI if they all belong to the same game. Second reason to use this property are emulators that support to load more than one file at once (like uae). I can't rely on file numbering because you will also have different releases for one game (Lemmings, Lemmings 2, Lemmings 3).

If you use "`_Disk`" as diskPrefix and you have some rom files named "`Mygame.adf`", "`Mygame 2_Disk1.adf`" and "`Mygame 2_Disk2.adf`" this will be detected as two games "`Mygame`" and "`Mygame 2`" where "`Mygame 2`" consists of two rom files. In the UI you will see the "friendly" gamename "`Mygame 2`". If you have your emulatorCmd configured to support multiple rom files you can load both files at once (see explanation of parameter "emulatorCmd").


==== useEmuSolo ====
If set to "True" RCB will try to kill XBMC before starting the emulator. After exiting the emulator you will return to XBMC. If "False" the emulator will be launched while XBMC is running in the background.

This mechanism invokes a batch (Windows) or bash (Linux) file. If you have problems with launching the emulator or returning to XBMC please check the commands in the file "applaunch.bat" (Windows) or "applaunch.sh" (Linux). You must be able to execute the command that is used to launch XBMC.

When restarting XBMC RCB will try to create a file "autoexec.py" in XBMCs main script directory. This will be used by XBMC to launch RCB automatically after restarting. If you already use an "autoexec.py" RCB will try to backup your original file and restores it after restarting. Make sure that the user that runs XBMC has write access to XBMCs main script directory.

==== escapeCommand ====
This will escape the rom file names passed to the emulatorCmd. I did not have problems with using "True" in Linux and Windows. But maybe you can try to change this if you are running into problems with launching games.

==== relyOnNaming ====
This must be "True" actually. I thought about implementing other ways of importing rom files where you don't have to take care of your file naming. But as long as that is not done it must be "True".

==== descFilePerGame ====
There can be one big description file with descriptions for all games in it. Or you can have one description file per game. In second case the gamename must be somewhere in the path of the property `descFilePath` (configuration of descFilePath should look like this: "/home/user/emu/Amiga/Collection V1/%GAME%/info.txt").

==== startWithDescFile ====
This must be "False" actually. There are some rom collections (Amiga classix for example) that don't use proper file naming (rom files are named different than screenshots) but have one big description file where you will be linked to the rom files and the screenshot files. I am thinking about adding support for this scenario but this has a low priority at the moment.

==== descriptionParserFile ====
Most rom collections that use game description files will have a different file format. I built a configurable parser that reads parse instructions from an xml file and then tries to parse the game descriptions with these instructions. There can only be one description parser file per `RomCollection` entry. The format of the parser file is explained in a later section.

==== allowUpdate ====
If set to "False" RCB won't update your already imported game descriptions. All additional files (e.g. screenshots) will be imported if not already in database.

==== ignoreOnScan ====
If set to "True" this `RomCollection` will be ignored completely during import. If you have all data for one `RomCollection` in database you can set this to "False" and there won't be any changes to this collection during the next imports.

==== typeOfManual ====
This option is not implemented yet.

==== romPath ====
The path to your rom files. This path should include wildcards and file extension (`*`.adf for example).

You may use different paths and file extensions (.zip and .smc for example) for one collection.

==== descFilePath ====
The path to the game description files. These files will be used to obtain additional information like genre, plot, publisher etc. about a game. Depending on the "`DescFilePerGame`"-Parameter this should be the absolute path to one description file or a path using the %GAME%-placeholder. There can only be one descFilePath per `RomCollection`.

Examples:

"/home/user/emu/Amiga/Collection V1/%GAME%/info.txt"

"/home/user/emu/Amiga/Collection V1/Info/all.txt"


==== coverPath ====
The path to the cover files. There can be multiple paths per `RomCollection`. Also used to define file extensions for your files.

Examples:

"/home/user/emu/amiga/covers/%GAME%/`*`.png"

"/home/user/emu/amiga/%GAME%/covers/`*`.png"

"/home/user/emu/amiga/covers/%GAME%.png"

"/home/user/emu/amiga/covers/%GAME%.jpg"

"/home/user/emu/amiga/covers/%GAME%.gif"


==== ingamescreenshotPath ====
The path to the ingame screenshot files. There can be multiple paths per `RomCollection`. Also used to define file extensions for your files.

Examples:

"/home/user/emu/amiga/ingame screens/%GAME%/`*`.png"

"/home/user/emu/amiga/%GAME%/ingame screens/`*`.png"

"/home/user/emu/amiga/ingame screens/%GAME%.png"

"/home/user/emu/amiga/ingame screens/%GAME%.jpg"

"/home/user/emu/amiga/ingame screens/%GAME%.gif"


==== titleScreenshotPath ====
The path to the title screenshot files. There can be multiple paths per `RomCollection`. Also used to define file extensions for your files.

Examples:

"/home/user/emu/amiga/title screens/%GAME%/`*`.png"

"/home/user/emu/amiga/%GAME%/title screens/`*`.png"

"/home/user/emu/amiga/title screens/%GAME%.png"

"/home/user/emu/amiga/title screens/%GAME%.jpg"

"/home/user/emu/amiga/title screens/%GAME%.gif"


NOTE: These files will be imported but not shown in the UI actually.

==== cartridgePath ====
The path to the cartridge files. There can be multiple paths per `RomCollection`. Also used to define file extensions for your files.

Examples:

"/home/user/emu/amiga/cartridges/%GAME%/`*`.png"

"/home/user/emu/amiga/%GAME%/cartridges/`*`.png"

"/home/user/emu/amiga/cartridges/%GAME%.png"

"/home/user/emu/amiga/cartridges/%GAME%.jpg"

"/home/user/emu/amiga/cartridges/%GAME%.gif"


NOTE: These files will be imported but not shown in the UI actually.


==== configFilePath ====
NOTE: These files will be imported but not shown in the UI actually.

==== ingamevidPath ====
NOTE: These files will be imported but not shown in the UI actually.

==== trailerPath ====
NOTE: These files will be imported but not shown in the UI actually.

==== manualPath ====
NOTE: These files will be imported but not shown in the UI actually.


== parserConfig.xml ==
The description file parser is very simple. It will read the parserConfig file that you specify in config.xml (you can have different parserConfigs for every `RomCollection`). This parserConfig xml file will be read element by element and transferred into parser grammar (using pyparsing). That means you have to take care of the elements order. Afterwards pyparsing reads the text file and tries to apply its given grammar. It always moves forward and looks for a match to the actual grammar token. If it does not match it will raise an exception. You will find this exception message in the log file "update.log" (RCB home directory).

This is an example game description text file:
{{{
Game: Ports Of Call
Platform: Amiga
Region: USA
Media: Disk
Controller: Joystick
Genre: Simulation, Strategy
Release Year: 1987
Developer: Aegis International
Publisher: Aegis International
Players: 4
URL: http://www.mobygames.com/game/amiga/ports-of-call
Description:
Ports of Call gives you the job of a shipowner. First you have to choose your hometown and after that you have to buy your first used ship. Then you have to charter freight and bring it to its destination. With this profit you can buy new ships and so on and on. You also have to repair your ships regularly. If you do not your ships will sink to the oceans.

Ports of Call is a classic German business simulation with some action sequences. In this sequences you must steer your ship into the port or have to rescue some shipwrecked people.

Up to 4 captains can play at one computer.
********************************************************************
Game: Airborne Ranger
Platform: Amiga
Region: 
Media: 
Controller: 
Genre: Action, Simulation
Release Year: 1989
Developer: MicroProse Software, Inc.
Publisher: MicroProse Software, Inc.
Players: ????
URL: http://www.mobygames.com/game/amiga/airborne-ranger
Description:
In this action/simulation game by Microprose the player takes the role of an U.S. Army airborne ranger. These Airborne rangers are dropped behind enemy lines by parachute to perform all kinds of dangerous missions. Gameplay consists of 3 phases:
Reading the mission briefing and outfitting 3 supply pods with machine gun ammo, time bombs, first-aid kits, grenades &amp; LAW rockets depending on this briefing.
Flying over the mission map in a V-22 Osprey plane to drop your 3 supply pods and parachuting out of the plane yourself.
Performing the actual missions and reaching the pick-up point before time runs out. There are 12 different missions which include capturing an enemy officer, blowing up an ammunition depot, photographing an experimental aircraft and liberating P.O.W.'s
Missions take place in either an arctic, desert or temperate setting. Using the mission map the player must decide the route towards the mission objective. This might require them to crawl through trenches, run around minefields or take out enemy soldiers and bunkers. Airborne Ranger was one of the first games with some missions that required a stealthy approach (staying undetected until a certain time, taking out a guard and stealing an enemy uniform etc.).

Airborne Ranger can be played in practice or veteran mode. In practice mode, gameplay is limited to a single mission, while in veteran mode, a series of missions or an entire campaign is played in order to earn medals &amp; promotions. All missions can be played on several difficulty levels.
********************************************************************
}}}

The parser config for this text file will look like this:

{{{
<parserConfig>
	<GameGrammar type="multiline">
		<SkippableContent>Game: </SkippableContent>
		<Game restOfLine="true"></Game>		
		<SkippableContent>Platform: </SkippableContent>
		<Platform delimiter="," restOfLine="true"></Platform>
		<SkippableContent>Region: </SkippableContent>
		<Region delimiter="," restOfLine="true"></Region>
		<SkippableContent>Media: </SkippableContent>
		<Media delimiter="," restOfLine="true"></Media>
		<SkippableContent>Controller: </SkippableContent>
		<Controller delimiter="," restOfLine="true"></Controller>
		<SkippableContent>Genre: </SkippableContent>
		<Genre delimiter="," restOfLine="true"></Genre>
		<SkippableContent>Release Year: </SkippableContent>
		<ReleaseYear delimiter="," restOfLine="true"></ReleaseYear>
		<SkippableContent>Developer: </SkippableContent>
		<Developer delimiter="," restOfLine="true"></Developer>
		<SkippableContent>Publisher: </SkippableContent>
		<Publisher restOfLine="true"></Publisher>
		<SkippableContent>Players: </SkippableContent>
		<Players delimiter="," restOfLine="true"></Players>
		<SkippableContent>URL: </SkippableContent>
		<URL delimiter="," restOfLine="true"></URL>
		<SkippableContent restOfLine="true">Description:</SkippableContent>
		<Description skipTo="*"></Description>
		<SkippableContent restOfLine="true"></SkippableContent>		
	</GameGrammar>
</parserConfig>
}}}

Lets explain the first two lines of the config file:
`<SkippableContent>Game: </SkippableContent>` will search for the exact occurance of "Game: " at the beginning of the text file. If it is not found pyparsing will raise an exception and stops parsing. If the text is found it will skip this content and executes the next rule: `<Game restOfLine="true"></Game>`. This will take all text from the current position (we are one letter behind "Game: " now) to the end of the line and stores this as a value to the key `Game`. When parsing of the complete file is done RCB can access this value using the given key.

There are not many configuration options at the moment. Actually only `GameGrammar type="multiline`" is supported. I think about adding support for xml files or one-line csv but that has a low prio.

=== Elements ===
There are only two types of elements in the current version.

==== Named Element ====
A named element like `<Game restOfLine="true"></Game>` will return a key value pair to RCB where the element name is the key and the parsed content will be the value. All information in your description file that is valuable input to RCB must be declared as a named element in this configuration file.

Supported elements in current version:

Game, Genre, ReleaseYear, Publisher, Description, Reviewer, Region, Media, Controller, Players, Developer, URL, Rating, Votes, Perspective



==== Skippable Content ====
As the name says all content that matches the given instruction will be skipped. `SkippableContent` may have an element value. This value must occur exactly at the current position in the description file.


=== Attributes ===
==== restOfLine ====
If "true" all content from current position to the rest of the line will be matched by this expression

==== delimiter ====
If you have delimited values this will specify the used delimiter. Every delimited value will be saved to database as a single entry.

NOTE: Actually only the "," will be recognized as a delimiter.

==== skipTo ====
If you have multiline values (like description in the above example) you can specify a token that must occur after the multiline value. This token must be unique enough to not occur in your multiline value. The `*` in the above example may be a bad choice as there is a good chance of a star to occur in a game description.

= Update =
== V0.3 ==
To update an earlier version of RCB you have to delete your current database (just delete or rename the file `"MyGames.db"` in database directory) and reimport Settings and all game relevant data.

=== without preserving configuration changes ===
If you just played around with the test scenario and did not make any relevant changes to "config.xml" or the parser configuration you can just delete the complete RCB folder and follow the steps in the chapter "Installation" or "Setup test scenario".

=== preserving configuration changes ===
If you want to preserve your changes to "config.xml" the easiest way will be to backup your config file, delete the complete RCB folder, download and unzip the new version and copy your backup config back to the database folder.

You have to make the following changes to your config.xml:
Add new element `RCBSettings` as a child of the `<config>` element
{{{
	<RCBSettings>
		<favoriteConsole></favoriteConsole>
		<favoriteGenre></favoriteGenre>
		<showEntryAllConsoles>True</showEntryAllConsoles>
		<showEntryAllGenres>True</showEntryAllGenres>
		<showEntryAllYears>True</showEntryAllYears>
		<showEntryAllPublisher>True</showEntryAllPublisher>
		<saveViewStateOnExit>True</saveViewStateOnExit>
		<saveViewStateOnLaunchEmu>True</saveViewStateOnLaunchEmu>
	</RCBSettings>
}}}

Add new elements to all `<RomCollection>` elements:
{{{
		<typeOfManual>Text</typeOfManual>
		<allowUpdate>True</allowUpdate>
		<ignoreOnScan>False</ignoreOnScan>
}}}

Rename all elements `DescFilePerGame` (just make the first letter lowercase):
{{{
		<descFilePerGame>
}}}


= Changelog =
== V0.3 ==
- solved problem with executing batch file in windows

- using autoexec.py to launch RCB when restarting in solo mode

- saving and loading view state when relaunching RCB

- update entries during "import settings" and "update db"

- added support for multiple rom paths per rom collection

- importing games without game description

- better performance while loading game list

- added info label (shows information during import)

- sort filter list items alphabetically

- new Rom Collection property "ignoreOnScan": no changes to this collection during import

- new Game properties (imported via description file): developer, reviewer, maxPlayers, rating, votes, url, region, media, perspective, controller

- new global settings: showEntryAllConsoles, showEntryAllGenres, showEntryAllYears, showEntryAllPublisher, saveViewStateOnExit, saveViewStateOnLaunchEmu